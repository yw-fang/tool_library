import pandas as pd
from pymatgen.io.cif import CifParser

__author__ = "Yue-Wen FANG"
__maintainer__ = "Yue-Wen FANG"
__email__ = "fyuewen@gmail.com"
__status__ = "Development"
__creation_date__ = "October 23, 2018"
__final_date__ = "December 13, 2018"

"""
This script converts the cif to the tabular used for latex Table environment
The cif must be generated by the findsym, otherwise parser errors will show up.

One shortcoming of this script is that the crystal axis system may be changed
during conversion between different structure format.
"""

def get_cell_parameters(filename):
    structure_parser = CifParser(filename)
    structures = structure_parser.get_structures()
    structure = structures[0]
    space_group = structure.get_space_group_info()
    lattice_a = structure.lattice.a
    lattice_b = structure.lattice.b
    lattice_c = structure.lattice.c
    lattice_alpha = structure.lattice.alpha
    lattice_beta = structure.lattice.beta
    lattice_gamma = structure.lattice.gamma
    return [space_group,
            format(lattice_a, "4.3f"),
            format(lattice_b, "4.3f"),
            format(lattice_c, "4.3f"),
            # lattice_alpha,
            # lattice_beta,
            # lattice_gamma]
            format(lattice_alpha, "4.3f"),
            format(lattice_beta, "4.3f"),
            format(lattice_gamma, "4.3f")]


def get_skiprows(filename):
    linenumber = 0
    with open(filename) as fn:
        for line in fn:
            if 'Ba1' in line:
                print(line)
                break
            else:
                linenumber = linenumber + 1
    return linenumber


def data_load(filename):
    header_names = ["atom_type", "element", "multiplicity", "Wyckoff_label", "x", "y", "z", "occupancy", "symmform"]
    data = None
    with open(filename) as f:
        data = pd.read_csv(f, delim_whitespace=True, skiprows=get_skiprows(filename), names = header_names)
        data['Wyckoff_label_multi'] = data['multiplicity'] + data['Wyckoff_label']
        del data['Wyckoff_label']
        del data['multiplicity']
        del data['occupancy']
        del data['symmform']
        data = data.dropna()
    return data

file='2-Cm-findsym.cif'

data = data_load(file)
print(data)

tabular_header = '\\begin{tabular}[c]{@{}l@{}}'
tabular_end_double = '\\end{tabular} &&'
tabular_end_single = '\\end{tabular} &'

cellparameters_list = get_cell_parameters(file)
# print(cellparameters_list)
space_group = cellparameters_list[0]
space_group_sign = space_group[0]
print('${' + space_group_sign + '}$ &&')
# print(tabular_header + '$a$ =', cellparameters_list[1], '~\\AA\\\\$b$ = ', cellparameters_list[2],
#       '~\\AA\\\\$c$ = ', cellparameters_list[3],'~\\AA\\\\$\\alpha$ = ', cellparameters_list[4],
#       '$^{\\circ}$\\\\$\\beta$ =', cellparameters_list[5], '$^{\\circ}$\\\\$\\gamma$ =',
#       cellparameters_list[6], '$^{\\circ}$' + tabular_end_double)
print(tabular_header + '$a$ = ',
        cellparameters_list[1]+'~\\AA\\\\$b$ = ', cellparameters_list[2]+
        '~\\AA\\\\$c$ = ', cellparameters_list[3]+'~\\AA\\\\$\\alpha$ = ',
        cellparameters_list[4]+
        '$^{\\circ}$\\\\$\\beta$ = ',
        cellparameters_list[5]+'$^{\\circ}$\\\\$\\gamma$ = ',
        cellparameters_list[6]+'$^{\\circ}$' + tabular_end_double)

atom_type_list = data['atom_type'].tolist()
print(tabular_header + '\\\\'.join(atom_type_list) + tabular_end_double)

wyckoff_list = data['Wyckoff_label_multi'].tolist()
print(tabular_header + '\\\\'.join(wyckoff_list) + tabular_end_single)

x_list = data['x'].tolist()
print(tabular_header + "\\\\".join(format(x, "4.3f") for x in x_list) + tabular_end_single)

y_list = data['y'].tolist()
print(tabular_header + "\\\\".join(format(y, "4.3f") for y in y_list) + tabular_end_single)

z_list = data['z'].tolist()
print(tabular_header + "\\\\".join(format(z, "4.3f") for z in z_list) + tabular_end_single)
